declare type BaseElements = ParentNode | ArrayLike<ParentNode>;
/**
 * @param selectors      One or more CSS selectors separated by commas
 * @param [baseElement]  The element to look inside of
 * @return               The element found, if any
 */
declare function select<T extends keyof HTMLElementTagNameMap>(selectors: T, baseElement?: ParentNode): HTMLElementTagNameMap[T] | null;
declare namespace select {
    var last: typeof selectLast;
    var exists: typeof selectExists;
    var all: typeof selectAll;
}
declare function select<T extends keyof SVGElementTagNameMap>(selectors: T, baseElement?: ParentNode): SVGElementTagNameMap[T] | null;
declare namespace select {
    var last: typeof selectLast;
    var exists: typeof selectExists;
    var all: typeof selectAll;
}
declare function select<T extends HTMLElement = HTMLElement>(selectors: string, baseElement?: ParentNode): T | null;
declare namespace select {
    var last: typeof selectLast;
    var exists: typeof selectExists;
    var all: typeof selectAll;
}
/**
 * @param selectors      One or more CSS selectors separated by commas
 * @param [baseElement]  The element to look inside of
 * @return               The element found, if any
 */
declare function selectLast<T extends keyof HTMLElementTagNameMap>(selectors: T, baseElement?: ParentNode): HTMLElementTagNameMap[T] | null;
declare function selectLast<T extends keyof SVGElementTagNameMap>(selectors: T, baseElement?: ParentNode): SVGElementTagNameMap[T] | null;
declare function selectLast<T extends HTMLElement = HTMLElement>(selectors: string, baseElement?: ParentNode): T | null;
/**
 * @param selectors      One or more CSS selectors separated by commas
 * @param [baseElement]  The element to look inside of
 * @return               Whether it's been found
 */
declare function selectExists(selectors: keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap | string, baseElement?: ParentNode): boolean;
/**
 * @param selectors       One or more CSS selectors separated by commas
 * @param [baseElements]  The element or list of elements to look inside of
 * @return                An array of elements found
 */
declare function selectAll<T extends keyof HTMLElementTagNameMap>(selectors: T, baseElements?: BaseElements): Array<HTMLElementTagNameMap[T]>;
declare function selectAll<T extends keyof SVGElementTagNameMap>(selectors: T, baseElements?: BaseElements): Array<SVGElementTagNameMap[T]>;
declare function selectAll<T extends HTMLElement = HTMLElement>(selectors: string, baseElements?: BaseElements): T[];
export = select;
